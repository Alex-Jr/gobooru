
version: '3.9'

name: gobooru

# contain all services
services:
  gobooru-client:
    container_name: gobooru-client
    depends_on:
      gobooru-server:
        condition: service_healthy
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        - REACT_APP_SERVER_URL=${SERVER_URL}
    restart: unless-stopped
    ports:
      - ${CLIENT_PORT}:80
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS http://localhost:80 || exit 1" ]
      interval: 60s
      timeout: 3s
      retries: 3
  gobooru-server:
    container_name: gobooru-server
    depends_on:
      gobooru-db:
        condition: service_healthy
    build:
      context: ./server
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - DB_SSLMODE=${DB_SSLMODE}
      - IQDB_URL=http://gobooru-iqdb:${IQDB_PORT}
      - STATIC_PATH=/app/data
      - CLIENT_URL=${CLIENT_URL}
    ports:
      - ${SERVER_PORT}:8080
    user : "1000:1000"
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8080/ping || exit 1" ]
      interval: 60s
      timeout: 3s
      retries: 3
    volumes:
      - server-data:/app/data
  gobooru-db:
    container_name: gobooru-db
    image: postgres:16.1-alpine3.19
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    ports:
      - "5450:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s  
    volumes:
      - db-data:/var/lib/postgresql/data
  gobooru-iqdb:
    container_name: gobooru-iqdb
    build:
      context: ./iqdb
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - DB_SSLMODE=${DB_SSLMODE}
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8000 || exit 1" ]
      interval: 60s
      timeout: 3s
      retries: 3
    volumes:
      - server-data:/app/data

volumes:
  server-data: 
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker-data/server
  db-data: 
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker-data/db