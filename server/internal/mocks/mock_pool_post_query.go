// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	database "gobooru/internal/database"

	mock "github.com/stretchr/testify/mock"

	models "gobooru/internal/models"
)

// MockPoolPostQuery is an autogenerated mock type for the PoolPostQuery type
type MockPoolPostQuery struct {
	mock.Mock
}

type MockPoolPostQuery_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPoolPostQuery) EXPECT() *MockPoolPostQuery_Expecter {
	return &MockPoolPostQuery_Expecter{mock: &_m.Mock}
}

// AssociatePosts provides a mock function with given fields: ctx, db, poolID, posts
func (_m *MockPoolPostQuery) AssociatePosts(ctx context.Context, db database.DBClient, poolID int, posts []models.Post) error {
	ret := _m.Called(ctx, db, poolID, posts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DBClient, int, []models.Post) error); ok {
		r0 = rf(ctx, db, poolID, posts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPoolPostQuery_AssociatePosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssociatePosts'
type MockPoolPostQuery_AssociatePosts_Call struct {
	*mock.Call
}

// AssociatePosts is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.DBClient
//   - poolID int
//   - posts []models.Post
func (_e *MockPoolPostQuery_Expecter) AssociatePosts(ctx interface{}, db interface{}, poolID interface{}, posts interface{}) *MockPoolPostQuery_AssociatePosts_Call {
	return &MockPoolPostQuery_AssociatePosts_Call{Call: _e.mock.On("AssociatePosts", ctx, db, poolID, posts)}
}

func (_c *MockPoolPostQuery_AssociatePosts_Call) Run(run func(ctx context.Context, db database.DBClient, poolID int, posts []models.Post)) *MockPoolPostQuery_AssociatePosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DBClient), args[2].(int), args[3].([]models.Post))
	})
	return _c
}

func (_c *MockPoolPostQuery_AssociatePosts_Call) Return(_a0 error) *MockPoolPostQuery_AssociatePosts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPoolPostQuery_AssociatePosts_Call) RunAndReturn(run func(context.Context, database.DBClient, int, []models.Post) error) *MockPoolPostQuery_AssociatePosts_Call {
	_c.Call.Return(run)
	return _c
}

// DisassociatePostsByID provides a mock function with given fields: ctx, db, poolID, postIDs
func (_m *MockPoolPostQuery) DisassociatePostsByID(ctx context.Context, db database.DBClient, poolID int, postIDs []int) error {
	ret := _m.Called(ctx, db, poolID, postIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DBClient, int, []int) error); ok {
		r0 = rf(ctx, db, poolID, postIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPoolPostQuery_DisassociatePostsByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisassociatePostsByID'
type MockPoolPostQuery_DisassociatePostsByID_Call struct {
	*mock.Call
}

// DisassociatePostsByID is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.DBClient
//   - poolID int
//   - postIDs []int
func (_e *MockPoolPostQuery_Expecter) DisassociatePostsByID(ctx interface{}, db interface{}, poolID interface{}, postIDs interface{}) *MockPoolPostQuery_DisassociatePostsByID_Call {
	return &MockPoolPostQuery_DisassociatePostsByID_Call{Call: _e.mock.On("DisassociatePostsByID", ctx, db, poolID, postIDs)}
}

func (_c *MockPoolPostQuery_DisassociatePostsByID_Call) Run(run func(ctx context.Context, db database.DBClient, poolID int, postIDs []int)) *MockPoolPostQuery_DisassociatePostsByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DBClient), args[2].(int), args[3].([]int))
	})
	return _c
}

func (_c *MockPoolPostQuery_DisassociatePostsByID_Call) Return(_a0 error) *MockPoolPostQuery_DisassociatePostsByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPoolPostQuery_DisassociatePostsByID_Call) RunAndReturn(run func(context.Context, database.DBClient, int, []int) error) *MockPoolPostQuery_DisassociatePostsByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPoolPostQuery creates a new instance of MockPoolPostQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPoolPostQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPoolPostQuery {
	mock := &MockPoolPostQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
