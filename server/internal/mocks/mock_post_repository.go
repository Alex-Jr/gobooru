// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "gobooru/internal/models"

	mock "github.com/stretchr/testify/mock"

	repositories "gobooru/internal/repositories"
)

// MockPostRepository is an autogenerated mock type for the PostRepository type
type MockPostRepository struct {
	mock.Mock
}

type MockPostRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostRepository) EXPECT() *MockPostRepository_Expecter {
	return &MockPostRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, args
func (_m *MockPostRepository) Create(ctx context.Context, args repositories.CreatePostArgs) (models.Post, error) {
	ret := _m.Called(ctx, args)

	var r0 models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreatePostArgs) (models.Post, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreatePostArgs) models.Post); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(models.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.CreatePostArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPostRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - args repositories.CreatePostArgs
func (_e *MockPostRepository_Expecter) Create(ctx interface{}, args interface{}) *MockPostRepository_Create_Call {
	return &MockPostRepository_Create_Call{Call: _e.mock.On("Create", ctx, args)}
}

func (_c *MockPostRepository_Create_Call) Run(run func(ctx context.Context, args repositories.CreatePostArgs)) *MockPostRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.CreatePostArgs))
	})
	return _c
}

func (_c *MockPostRepository_Create_Call) Return(_a0 models.Post, _a1 error) *MockPostRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostRepository_Create_Call) RunAndReturn(run func(context.Context, repositories.CreatePostArgs) (models.Post, error)) *MockPostRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostRepository creates a new instance of MockPostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostRepository {
	mock := &MockPostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
