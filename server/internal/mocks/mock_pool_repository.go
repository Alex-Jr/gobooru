// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "gobooru/internal/models"

	mock "github.com/stretchr/testify/mock"

	repositories "gobooru/internal/repositories"
)

// MockPoolRepository is an autogenerated mock type for the PoolRepository type
type MockPoolRepository struct {
	mock.Mock
}

type MockPoolRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPoolRepository) EXPECT() *MockPoolRepository_Expecter {
	return &MockPoolRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, args
func (_m *MockPoolRepository) Create(ctx context.Context, args repositories.PoolCreateArgs) (models.Pool, error) {
	ret := _m.Called(ctx, args)

	var r0 models.Pool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.PoolCreateArgs) (models.Pool, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.PoolCreateArgs) models.Pool); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(models.Pool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.PoolCreateArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPoolRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPoolRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - args repositories.PoolCreateArgs
func (_e *MockPoolRepository_Expecter) Create(ctx interface{}, args interface{}) *MockPoolRepository_Create_Call {
	return &MockPoolRepository_Create_Call{Call: _e.mock.On("Create", ctx, args)}
}

func (_c *MockPoolRepository_Create_Call) Run(run func(ctx context.Context, args repositories.PoolCreateArgs)) *MockPoolRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.PoolCreateArgs))
	})
	return _c
}

func (_c *MockPoolRepository_Create_Call) Return(_a0 models.Pool, _a1 error) *MockPoolRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPoolRepository_Create_Call) RunAndReturn(run func(context.Context, repositories.PoolCreateArgs) (models.Pool, error)) *MockPoolRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockPoolRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPoolRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockPoolRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockPoolRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockPoolRepository_Delete_Call {
	return &MockPoolRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockPoolRepository_Delete_Call) Run(run func(ctx context.Context, id int)) *MockPoolRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockPoolRepository_Delete_Call) Return(_a0 error) *MockPoolRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPoolRepository_Delete_Call) RunAndReturn(run func(context.Context, int) error) *MockPoolRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetFull provides a mock function with given fields: ctx, id
func (_m *MockPoolRepository) GetFull(ctx context.Context, id int) (models.Pool, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Pool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.Pool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Pool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Pool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPoolRepository_GetFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFull'
type MockPoolRepository_GetFull_Call struct {
	*mock.Call
}

// GetFull is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockPoolRepository_Expecter) GetFull(ctx interface{}, id interface{}) *MockPoolRepository_GetFull_Call {
	return &MockPoolRepository_GetFull_Call{Call: _e.mock.On("GetFull", ctx, id)}
}

func (_c *MockPoolRepository_GetFull_Call) Run(run func(ctx context.Context, id int)) *MockPoolRepository_GetFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockPoolRepository_GetFull_Call) Return(_a0 models.Pool, _a1 error) *MockPoolRepository_GetFull_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPoolRepository_GetFull_Call) RunAndReturn(run func(context.Context, int) (models.Pool, error)) *MockPoolRepository_GetFull_Call {
	_c.Call.Return(run)
	return _c
}

// ListFull provides a mock function with given fields: ctx, args
func (_m *MockPoolRepository) ListFull(ctx context.Context, args repositories.PoolListFullArgs) ([]models.Pool, int, error) {
	ret := _m.Called(ctx, args)

	var r0 []models.Pool
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.PoolListFullArgs) ([]models.Pool, int, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.PoolListFullArgs) []models.Pool); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Pool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.PoolListFullArgs) int); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, repositories.PoolListFullArgs) error); ok {
		r2 = rf(ctx, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPoolRepository_ListFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFull'
type MockPoolRepository_ListFull_Call struct {
	*mock.Call
}

// ListFull is a helper method to define mock.On call
//   - ctx context.Context
//   - args repositories.PoolListFullArgs
func (_e *MockPoolRepository_Expecter) ListFull(ctx interface{}, args interface{}) *MockPoolRepository_ListFull_Call {
	return &MockPoolRepository_ListFull_Call{Call: _e.mock.On("ListFull", ctx, args)}
}

func (_c *MockPoolRepository_ListFull_Call) Run(run func(ctx context.Context, args repositories.PoolListFullArgs)) *MockPoolRepository_ListFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.PoolListFullArgs))
	})
	return _c
}

func (_c *MockPoolRepository_ListFull_Call) Return(_a0 []models.Pool, _a1 int, _a2 error) *MockPoolRepository_ListFull_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPoolRepository_ListFull_Call) RunAndReturn(run func(context.Context, repositories.PoolListFullArgs) ([]models.Pool, int, error)) *MockPoolRepository_ListFull_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, args
func (_m *MockPoolRepository) Update(ctx context.Context, args repositories.PoolUpdateArgs) (models.Pool, error) {
	ret := _m.Called(ctx, args)

	var r0 models.Pool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.PoolUpdateArgs) (models.Pool, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.PoolUpdateArgs) models.Pool); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(models.Pool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.PoolUpdateArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPoolRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPoolRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - args repositories.PoolUpdateArgs
func (_e *MockPoolRepository_Expecter) Update(ctx interface{}, args interface{}) *MockPoolRepository_Update_Call {
	return &MockPoolRepository_Update_Call{Call: _e.mock.On("Update", ctx, args)}
}

func (_c *MockPoolRepository_Update_Call) Run(run func(ctx context.Context, args repositories.PoolUpdateArgs)) *MockPoolRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.PoolUpdateArgs))
	})
	return _c
}

func (_c *MockPoolRepository_Update_Call) Return(_a0 models.Pool, _a1 error) *MockPoolRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPoolRepository_Update_Call) RunAndReturn(run func(context.Context, repositories.PoolUpdateArgs) (models.Pool, error)) *MockPoolRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPoolRepository creates a new instance of MockPoolRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPoolRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPoolRepository {
	mock := &MockPoolRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
