// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	models "gobooru/internal/models"

	mock "github.com/stretchr/testify/mock"

	query_parser "gobooru/internal/query_parser"
)

// MockParser is an autogenerated mock type for the Parser type
type MockParser struct {
	mock.Mock
}

type MockParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockParser) EXPECT() *MockParser_Expecter {
	return &MockParser_Expecter{mock: &_m.Mock}
}

// ParseSearch provides a mock function with given fields: search
func (_m *MockParser) ParseSearch(search models.Search) (query_parser.ParserResponse, error) {
	ret := _m.Called(search)

	var r0 query_parser.ParserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Search) (query_parser.ParserResponse, error)); ok {
		return rf(search)
	}
	if rf, ok := ret.Get(0).(func(models.Search) query_parser.ParserResponse); ok {
		r0 = rf(search)
	} else {
		r0 = ret.Get(0).(query_parser.ParserResponse)
	}

	if rf, ok := ret.Get(1).(func(models.Search) error); ok {
		r1 = rf(search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockParser_ParseSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseSearch'
type MockParser_ParseSearch_Call struct {
	*mock.Call
}

// ParseSearch is a helper method to define mock.On call
//   - search models.Search
func (_e *MockParser_Expecter) ParseSearch(search interface{}) *MockParser_ParseSearch_Call {
	return &MockParser_ParseSearch_Call{Call: _e.mock.On("ParseSearch", search)}
}

func (_c *MockParser_ParseSearch_Call) Run(run func(search models.Search)) *MockParser_ParseSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Search))
	})
	return _c
}

func (_c *MockParser_ParseSearch_Call) Return(_a0 query_parser.ParserResponse, _a1 error) *MockParser_ParseSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockParser_ParseSearch_Call) RunAndReturn(run func(models.Search) (query_parser.ParserResponse, error)) *MockParser_ParseSearch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockParser creates a new instance of MockParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParser {
	mock := &MockParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
