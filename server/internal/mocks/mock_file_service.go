// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	models "gobooru/internal/models"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// MockFileService is an autogenerated mock type for the FileService type
type MockFileService struct {
	mock.Mock
}

type MockFileService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileService) EXPECT() *MockFileService_Expecter {
	return &MockFileService_Expecter{mock: &_m.Mock}
}

// HandleUpload provides a mock function with given fields: fileHeader
func (_m *MockFileService) HandleUpload(fileHeader *multipart.FileHeader) (models.File, error) {
	ret := _m.Called(fileHeader)

	var r0 models.File
	var r1 error
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) (models.File, error)); ok {
		return rf(fileHeader)
	}
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) models.File); ok {
		r0 = rf(fileHeader)
	} else {
		r0 = ret.Get(0).(models.File)
	}

	if rf, ok := ret.Get(1).(func(*multipart.FileHeader) error); ok {
		r1 = rf(fileHeader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileService_HandleUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleUpload'
type MockFileService_HandleUpload_Call struct {
	*mock.Call
}

// HandleUpload is a helper method to define mock.On call
//   - fileHeader *multipart.FileHeader
func (_e *MockFileService_Expecter) HandleUpload(fileHeader interface{}) *MockFileService_HandleUpload_Call {
	return &MockFileService_HandleUpload_Call{Call: _e.mock.On("HandleUpload", fileHeader)}
}

func (_c *MockFileService_HandleUpload_Call) Run(run func(fileHeader *multipart.FileHeader)) *MockFileService_HandleUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*multipart.FileHeader))
	})
	return _c
}

func (_c *MockFileService_HandleUpload_Call) Return(_a0 models.File, _a1 error) *MockFileService_HandleUpload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileService_HandleUpload_Call) RunAndReturn(run func(*multipart.FileHeader) (models.File, error)) *MockFileService_HandleUpload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileService creates a new instance of MockFileService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileService {
	mock := &MockFileService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
