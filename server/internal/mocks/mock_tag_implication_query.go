// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	database "gobooru/internal/database"

	mock "github.com/stretchr/testify/mock"
)

// MockTagImplicationQuery is an autogenerated mock type for the TagImplicationQuery type
type MockTagImplicationQuery struct {
	mock.Mock
}

type MockTagImplicationQuery_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagImplicationQuery) EXPECT() *MockTagImplicationQuery_Expecter {
	return &MockTagImplicationQuery_Expecter{mock: &_m.Mock}
}

// ResolveImplications provides a mock function with given fields: ctx, db, tags
func (_m *MockTagImplicationQuery) ResolveImplications(ctx context.Context, db database.DBClient, tags *[]string) error {
	ret := _m.Called(ctx, db, tags)

	if len(ret) == 0 {
		panic("no return value specified for ResolveImplications")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DBClient, *[]string) error); ok {
		r0 = rf(ctx, db, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagImplicationQuery_ResolveImplications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveImplications'
type MockTagImplicationQuery_ResolveImplications_Call struct {
	*mock.Call
}

// ResolveImplications is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.DBClient
//   - tags *[]string
func (_e *MockTagImplicationQuery_Expecter) ResolveImplications(ctx interface{}, db interface{}, tags interface{}) *MockTagImplicationQuery_ResolveImplications_Call {
	return &MockTagImplicationQuery_ResolveImplications_Call{Call: _e.mock.On("ResolveImplications", ctx, db, tags)}
}

func (_c *MockTagImplicationQuery_ResolveImplications_Call) Run(run func(ctx context.Context, db database.DBClient, tags *[]string)) *MockTagImplicationQuery_ResolveImplications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DBClient), args[2].(*[]string))
	})
	return _c
}

func (_c *MockTagImplicationQuery_ResolveImplications_Call) Return(_a0 error) *MockTagImplicationQuery_ResolveImplications_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagImplicationQuery_ResolveImplications_Call) RunAndReturn(run func(context.Context, database.DBClient, *[]string) error) *MockTagImplicationQuery_ResolveImplications_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTagImplicationQuery creates a new instance of MockTagImplicationQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagImplicationQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagImplicationQuery {
	mock := &MockTagImplicationQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
