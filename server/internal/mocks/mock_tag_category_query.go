// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	database "gobooru/internal/database"

	mock "github.com/stretchr/testify/mock"

	models "gobooru/internal/models"
)

// MockTagCategoryQuery is an autogenerated mock type for the TagCategoryQuery type
type MockTagCategoryQuery struct {
	mock.Mock
}

type MockTagCategoryQuery_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagCategoryQuery) EXPECT() *MockTagCategoryQuery_Expecter {
	return &MockTagCategoryQuery_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: ctx, db, tagCategories
func (_m *MockTagCategoryQuery) List(ctx context.Context, db database.DBClient, tagCategories *[]models.TagCategory) error {
	ret := _m.Called(ctx, db, tagCategories)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DBClient, *[]models.TagCategory) error); ok {
		r0 = rf(ctx, db, tagCategories)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagCategoryQuery_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTagCategoryQuery_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.DBClient
//   - tagCategories *[]models.TagCategory
func (_e *MockTagCategoryQuery_Expecter) List(ctx interface{}, db interface{}, tagCategories interface{}) *MockTagCategoryQuery_List_Call {
	return &MockTagCategoryQuery_List_Call{Call: _e.mock.On("List", ctx, db, tagCategories)}
}

func (_c *MockTagCategoryQuery_List_Call) Run(run func(ctx context.Context, db database.DBClient, tagCategories *[]models.TagCategory)) *MockTagCategoryQuery_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DBClient), args[2].(*[]models.TagCategory))
	})
	return _c
}

func (_c *MockTagCategoryQuery_List_Call) Return(_a0 error) *MockTagCategoryQuery_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagCategoryQuery_List_Call) RunAndReturn(run func(context.Context, database.DBClient, *[]models.TagCategory) error) *MockTagCategoryQuery_List_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTagCount provides a mock function with given fields: ctx, db, tagCategory, value
func (_m *MockTagCategoryQuery) UpdateTagCount(ctx context.Context, db database.DBClient, tagCategory string, value int) error {
	ret := _m.Called(ctx, db, tagCategory, value)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTagCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DBClient, string, int) error); ok {
		r0 = rf(ctx, db, tagCategory, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagCategoryQuery_UpdateTagCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTagCount'
type MockTagCategoryQuery_UpdateTagCount_Call struct {
	*mock.Call
}

// UpdateTagCount is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.DBClient
//   - tagCategory string
//   - value int
func (_e *MockTagCategoryQuery_Expecter) UpdateTagCount(ctx interface{}, db interface{}, tagCategory interface{}, value interface{}) *MockTagCategoryQuery_UpdateTagCount_Call {
	return &MockTagCategoryQuery_UpdateTagCount_Call{Call: _e.mock.On("UpdateTagCount", ctx, db, tagCategory, value)}
}

func (_c *MockTagCategoryQuery_UpdateTagCount_Call) Run(run func(ctx context.Context, db database.DBClient, tagCategory string, value int)) *MockTagCategoryQuery_UpdateTagCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DBClient), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MockTagCategoryQuery_UpdateTagCount_Call) Return(_a0 error) *MockTagCategoryQuery_UpdateTagCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagCategoryQuery_UpdateTagCount_Call) RunAndReturn(run func(context.Context, database.DBClient, string, int) error) *MockTagCategoryQuery_UpdateTagCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTagCategoryQuery creates a new instance of MockTagCategoryQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagCategoryQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagCategoryQuery {
	mock := &MockTagCategoryQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
