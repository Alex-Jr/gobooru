// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	database "gobooru/internal/database"

	mock "github.com/stretchr/testify/mock"

	models "gobooru/internal/models"
)

// MockPostRelationQuery is an autogenerated mock type for the PostRelationQuery type
type MockPostRelationQuery struct {
	mock.Mock
}

type MockPostRelationQuery_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostRelationQuery) EXPECT() *MockPostRelationQuery_Expecter {
	return &MockPostRelationQuery_Expecter{mock: &_m.Mock}
}

// InsertRelations provides a mock function with given fields: ctx, db, post, relations
func (_m *MockPostRelationQuery) InsertRelations(ctx context.Context, db database.DBClient, post models.Post, relations []models.PostRelation) error {
	ret := _m.Called(ctx, db, post, relations)

	if len(ret) == 0 {
		panic("no return value specified for InsertRelations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DBClient, models.Post, []models.PostRelation) error); ok {
		r0 = rf(ctx, db, post, relations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPostRelationQuery_InsertRelations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertRelations'
type MockPostRelationQuery_InsertRelations_Call struct {
	*mock.Call
}

// InsertRelations is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.DBClient
//   - post models.Post
//   - relations []models.PostRelation
func (_e *MockPostRelationQuery_Expecter) InsertRelations(ctx interface{}, db interface{}, post interface{}, relations interface{}) *MockPostRelationQuery_InsertRelations_Call {
	return &MockPostRelationQuery_InsertRelations_Call{Call: _e.mock.On("InsertRelations", ctx, db, post, relations)}
}

func (_c *MockPostRelationQuery_InsertRelations_Call) Run(run func(ctx context.Context, db database.DBClient, post models.Post, relations []models.PostRelation)) *MockPostRelationQuery_InsertRelations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DBClient), args[2].(models.Post), args[3].([]models.PostRelation))
	})
	return _c
}

func (_c *MockPostRelationQuery_InsertRelations_Call) Return(_a0 error) *MockPostRelationQuery_InsertRelations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPostRelationQuery_InsertRelations_Call) RunAndReturn(run func(context.Context, database.DBClient, models.Post, []models.PostRelation) error) *MockPostRelationQuery_InsertRelations_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostRelationQuery creates a new instance of MockPostRelationQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostRelationQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostRelationQuery {
	mock := &MockPostRelationQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
