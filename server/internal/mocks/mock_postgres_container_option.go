// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	database "gobooru/internal/database"

	mock "github.com/stretchr/testify/mock"
)

// MockPostgresContainerOption is an autogenerated mock type for the PostgresContainerOption type
type MockPostgresContainerOption struct {
	mock.Mock
}

type MockPostgresContainerOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostgresContainerOption) EXPECT() *MockPostgresContainerOption_Expecter {
	return &MockPostgresContainerOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: c
func (_m *MockPostgresContainerOption) Execute(c *database.PostgresContainerConfig) {
	_m.Called(c)
}

// MockPostgresContainerOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockPostgresContainerOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - c *database.PostgresContainerConfig
func (_e *MockPostgresContainerOption_Expecter) Execute(c interface{}) *MockPostgresContainerOption_Execute_Call {
	return &MockPostgresContainerOption_Execute_Call{Call: _e.mock.On("Execute", c)}
}

func (_c *MockPostgresContainerOption_Execute_Call) Run(run func(c *database.PostgresContainerConfig)) *MockPostgresContainerOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*database.PostgresContainerConfig))
	})
	return _c
}

func (_c *MockPostgresContainerOption_Execute_Call) Return() *MockPostgresContainerOption_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPostgresContainerOption_Execute_Call) RunAndReturn(run func(*database.PostgresContainerConfig)) *MockPostgresContainerOption_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostgresContainerOption creates a new instance of MockPostgresContainerOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostgresContainerOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostgresContainerOption {
	mock := &MockPostgresContainerOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
