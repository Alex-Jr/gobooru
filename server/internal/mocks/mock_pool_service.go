// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dtos "gobooru/internal/dtos"

	mock "github.com/stretchr/testify/mock"
)

// MockPoolService is an autogenerated mock type for the PoolService type
type MockPoolService struct {
	mock.Mock
}

type MockPoolService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPoolService) EXPECT() *MockPoolService_Expecter {
	return &MockPoolService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, dto
func (_m *MockPoolService) Create(ctx context.Context, dto dtos.CreatePoolDTO) (dtos.CreatePoolResponseDTO, error) {
	ret := _m.Called(ctx, dto)

	var r0 dtos.CreatePoolResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dtos.CreatePoolDTO) (dtos.CreatePoolResponseDTO, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dtos.CreatePoolDTO) dtos.CreatePoolResponseDTO); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(dtos.CreatePoolResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dtos.CreatePoolDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPoolService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPoolService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - dto dtos.CreatePoolDTO
func (_e *MockPoolService_Expecter) Create(ctx interface{}, dto interface{}) *MockPoolService_Create_Call {
	return &MockPoolService_Create_Call{Call: _e.mock.On("Create", ctx, dto)}
}

func (_c *MockPoolService_Create_Call) Run(run func(ctx context.Context, dto dtos.CreatePoolDTO)) *MockPoolService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dtos.CreatePoolDTO))
	})
	return _c
}

func (_c *MockPoolService_Create_Call) Return(_a0 dtos.CreatePoolResponseDTO, _a1 error) *MockPoolService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPoolService_Create_Call) RunAndReturn(run func(context.Context, dtos.CreatePoolDTO) (dtos.CreatePoolResponseDTO, error)) *MockPoolService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPoolService creates a new instance of MockPoolService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPoolService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPoolService {
	mock := &MockPoolService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
