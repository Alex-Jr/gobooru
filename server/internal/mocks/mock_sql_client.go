// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	database "gobooru/internal/database"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	sqlx "github.com/go-sqlx/sqlx"
)

// MockSQLClient is an autogenerated mock type for the SQLClient type
type MockSQLClient struct {
	mock.Mock
}

type MockSQLClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSQLClient) EXPECT() *MockSQLClient_Expecter {
	return &MockSQLClient_Expecter{mock: &_m.Mock}
}

// BeginTxx provides a mock function with given fields: ctx, opts
func (_m *MockSQLClient) BeginTxx(ctx context.Context, opts *database.TxOptions) (database.TransactionClient, error) {
	ret := _m.Called(ctx, opts)

	var r0 database.TransactionClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.TxOptions) (database.TransactionClient, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.TxOptions) database.TransactionClient); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.TransactionClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.TxOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSQLClient_BeginTxx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTxx'
type MockSQLClient_BeginTxx_Call struct {
	*mock.Call
}

// BeginTxx is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *database.TxOptions
func (_e *MockSQLClient_Expecter) BeginTxx(ctx interface{}, opts interface{}) *MockSQLClient_BeginTxx_Call {
	return &MockSQLClient_BeginTxx_Call{Call: _e.mock.On("BeginTxx", ctx, opts)}
}

func (_c *MockSQLClient_BeginTxx_Call) Run(run func(ctx context.Context, opts *database.TxOptions)) *MockSQLClient_BeginTxx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.TxOptions))
	})
	return _c
}

func (_c *MockSQLClient_BeginTxx_Call) Return(_a0 database.TransactionClient, _a1 error) *MockSQLClient_BeginTxx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSQLClient_BeginTxx_Call) RunAndReturn(run func(context.Context, *database.TxOptions) (database.TransactionClient, error)) *MockSQLClient_BeginTxx_Call {
	_c.Call.Return(run)
	return _c
}

// ExecContext provides a mock function with given fields: ctx, query, args
func (_m *MockSQLClient) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (sql.Result, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSQLClient_ExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContext'
type MockSQLClient_ExecContext_Call struct {
	*mock.Call
}

// ExecContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockSQLClient_Expecter) ExecContext(ctx interface{}, query interface{}, args ...interface{}) *MockSQLClient_ExecContext_Call {
	return &MockSQLClient_ExecContext_Call{Call: _e.mock.On("ExecContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockSQLClient_ExecContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockSQLClient_ExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSQLClient_ExecContext_Call) Return(_a0 sql.Result, _a1 error) *MockSQLClient_ExecContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSQLClient_ExecContext_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (sql.Result, error)) *MockSQLClient_ExecContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function with given fields: ctx, dest, query, args
func (_m *MockSQLClient) GetContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSQLClient_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockSQLClient_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
//   - ctx context.Context
//   - dest interface{}
//   - query string
//   - args ...interface{}
func (_e *MockSQLClient_Expecter) GetContext(ctx interface{}, dest interface{}, query interface{}, args ...interface{}) *MockSQLClient_GetContext_Call {
	return &MockSQLClient_GetContext_Call{Call: _e.mock.On("GetContext",
		append([]interface{}{ctx, dest, query}, args...)...)}
}

func (_c *MockSQLClient_GetContext_Call) Run(run func(ctx context.Context, dest interface{}, query string, args ...interface{})) *MockSQLClient_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSQLClient_GetContext_Call) Return(_a0 error) *MockSQLClient_GetContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSQLClient_GetContext_Call) RunAndReturn(run func(context.Context, interface{}, string, ...interface{}) error) *MockSQLClient_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// NamedExecContext provides a mock function with given fields: ctx, query, arg
func (_m *MockSQLClient) NamedExecContext(ctx context.Context, query string, arg interface{}) (sql.Result, error) {
	ret := _m.Called(ctx, query, arg)

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (sql.Result, error)); ok {
		return rf(ctx, query, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) sql.Result); ok {
		r0 = rf(ctx, query, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, query, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSQLClient_NamedExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NamedExecContext'
type MockSQLClient_NamedExecContext_Call struct {
	*mock.Call
}

// NamedExecContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - arg interface{}
func (_e *MockSQLClient_Expecter) NamedExecContext(ctx interface{}, query interface{}, arg interface{}) *MockSQLClient_NamedExecContext_Call {
	return &MockSQLClient_NamedExecContext_Call{Call: _e.mock.On("NamedExecContext", ctx, query, arg)}
}

func (_c *MockSQLClient_NamedExecContext_Call) Run(run func(ctx context.Context, query string, arg interface{})) *MockSQLClient_NamedExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockSQLClient_NamedExecContext_Call) Return(_a0 sql.Result, _a1 error) *MockSQLClient_NamedExecContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSQLClient_NamedExecContext_Call) RunAndReturn(run func(context.Context, string, interface{}) (sql.Result, error)) *MockSQLClient_NamedExecContext_Call {
	_c.Call.Return(run)
	return _c
}

// NamedQueryContext provides a mock function with given fields: ctx, query, arg
func (_m *MockSQLClient) NamedQueryContext(ctx context.Context, query string, arg interface{}) (*sqlx.Rows, error) {
	ret := _m.Called(ctx, query, arg)

	var r0 *sqlx.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (*sqlx.Rows, error)); ok {
		return rf(ctx, query, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *sqlx.Rows); ok {
		r0 = rf(ctx, query, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, query, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSQLClient_NamedQueryContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NamedQueryContext'
type MockSQLClient_NamedQueryContext_Call struct {
	*mock.Call
}

// NamedQueryContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - arg interface{}
func (_e *MockSQLClient_Expecter) NamedQueryContext(ctx interface{}, query interface{}, arg interface{}) *MockSQLClient_NamedQueryContext_Call {
	return &MockSQLClient_NamedQueryContext_Call{Call: _e.mock.On("NamedQueryContext", ctx, query, arg)}
}

func (_c *MockSQLClient_NamedQueryContext_Call) Run(run func(ctx context.Context, query string, arg interface{})) *MockSQLClient_NamedQueryContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockSQLClient_NamedQueryContext_Call) Return(_a0 *sqlx.Rows, _a1 error) *MockSQLClient_NamedQueryContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSQLClient_NamedQueryContext_Call) RunAndReturn(run func(context.Context, string, interface{}) (*sqlx.Rows, error)) *MockSQLClient_NamedQueryContext_Call {
	_c.Call.Return(run)
	return _c
}

// SelectContext provides a mock function with given fields: ctx, dest, query, args
func (_m *MockSQLClient) SelectContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSQLClient_SelectContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectContext'
type MockSQLClient_SelectContext_Call struct {
	*mock.Call
}

// SelectContext is a helper method to define mock.On call
//   - ctx context.Context
//   - dest interface{}
//   - query string
//   - args ...interface{}
func (_e *MockSQLClient_Expecter) SelectContext(ctx interface{}, dest interface{}, query interface{}, args ...interface{}) *MockSQLClient_SelectContext_Call {
	return &MockSQLClient_SelectContext_Call{Call: _e.mock.On("SelectContext",
		append([]interface{}{ctx, dest, query}, args...)...)}
}

func (_c *MockSQLClient_SelectContext_Call) Run(run func(ctx context.Context, dest interface{}, query string, args ...interface{})) *MockSQLClient_SelectContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSQLClient_SelectContext_Call) Return(_a0 error) *MockSQLClient_SelectContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSQLClient_SelectContext_Call) RunAndReturn(run func(context.Context, interface{}, string, ...interface{}) error) *MockSQLClient_SelectContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSQLClient creates a new instance of MockSQLClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSQLClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSQLClient {
	mock := &MockSQLClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
