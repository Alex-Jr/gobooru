// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// MockTagController is an autogenerated mock type for the TagController type
type MockTagController struct {
	mock.Mock
}

type MockTagController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagController) EXPECT() *MockTagController_Expecter {
	return &MockTagController_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: c
func (_m *MockTagController) Delete(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagController_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTagController_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockTagController_Expecter) Delete(c interface{}) *MockTagController_Delete_Call {
	return &MockTagController_Delete_Call{Call: _e.mock.On("Delete", c)}
}

func (_c *MockTagController_Delete_Call) Run(run func(c echo.Context)) *MockTagController_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockTagController_Delete_Call) Return(_a0 error) *MockTagController_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagController_Delete_Call) RunAndReturn(run func(echo.Context) error) *MockTagController_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function with given fields: c
func (_m *MockTagController) Fetch(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagController_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockTagController_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockTagController_Expecter) Fetch(c interface{}) *MockTagController_Fetch_Call {
	return &MockTagController_Fetch_Call{Call: _e.mock.On("Fetch", c)}
}

func (_c *MockTagController_Fetch_Call) Run(run func(c echo.Context)) *MockTagController_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockTagController_Fetch_Call) Return(_a0 error) *MockTagController_Fetch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagController_Fetch_Call) RunAndReturn(run func(echo.Context) error) *MockTagController_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: c
func (_m *MockTagController) List(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagController_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTagController_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockTagController_Expecter) List(c interface{}) *MockTagController_List_Call {
	return &MockTagController_List_Call{Call: _e.mock.On("List", c)}
}

func (_c *MockTagController_List_Call) Run(run func(c echo.Context)) *MockTagController_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockTagController_List_Call) Return(_a0 error) *MockTagController_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagController_List_Call) RunAndReturn(run func(echo.Context) error) *MockTagController_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTagController creates a new instance of MockTagController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagController {
	mock := &MockTagController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
