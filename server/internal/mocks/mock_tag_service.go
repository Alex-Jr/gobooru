// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dtos "gobooru/internal/dtos"

	mock "github.com/stretchr/testify/mock"
)

// MockTagService is an autogenerated mock type for the TagService type
type MockTagService struct {
	mock.Mock
}

type MockTagService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagService) EXPECT() *MockTagService_Expecter {
	return &MockTagService_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, dto
func (_m *MockTagService) Delete(ctx context.Context, dto dtos.DeleteTagDTO) (dtos.DeleteTagResponseDTO, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 dtos.DeleteTagResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dtos.DeleteTagDTO) (dtos.DeleteTagResponseDTO, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dtos.DeleteTagDTO) dtos.DeleteTagResponseDTO); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(dtos.DeleteTagResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dtos.DeleteTagDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTagService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - dto dtos.DeleteTagDTO
func (_e *MockTagService_Expecter) Delete(ctx interface{}, dto interface{}) *MockTagService_Delete_Call {
	return &MockTagService_Delete_Call{Call: _e.mock.On("Delete", ctx, dto)}
}

func (_c *MockTagService_Delete_Call) Run(run func(ctx context.Context, dto dtos.DeleteTagDTO)) *MockTagService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dtos.DeleteTagDTO))
	})
	return _c
}

func (_c *MockTagService_Delete_Call) Return(_a0 dtos.DeleteTagResponseDTO, _a1 error) *MockTagService_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagService_Delete_Call) RunAndReturn(run func(context.Context, dtos.DeleteTagDTO) (dtos.DeleteTagResponseDTO, error)) *MockTagService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function with given fields: ctx, dto
func (_m *MockTagService) Fetch(ctx context.Context, dto dtos.FetchTagDTO) (dtos.FetchTagResponseDTO, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 dtos.FetchTagResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dtos.FetchTagDTO) (dtos.FetchTagResponseDTO, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dtos.FetchTagDTO) dtos.FetchTagResponseDTO); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(dtos.FetchTagResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dtos.FetchTagDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagService_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockTagService_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
//   - dto dtos.FetchTagDTO
func (_e *MockTagService_Expecter) Fetch(ctx interface{}, dto interface{}) *MockTagService_Fetch_Call {
	return &MockTagService_Fetch_Call{Call: _e.mock.On("Fetch", ctx, dto)}
}

func (_c *MockTagService_Fetch_Call) Run(run func(ctx context.Context, dto dtos.FetchTagDTO)) *MockTagService_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dtos.FetchTagDTO))
	})
	return _c
}

func (_c *MockTagService_Fetch_Call) Return(_a0 dtos.FetchTagResponseDTO, _a1 error) *MockTagService_Fetch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagService_Fetch_Call) RunAndReturn(run func(context.Context, dtos.FetchTagDTO) (dtos.FetchTagResponseDTO, error)) *MockTagService_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, dto
func (_m *MockTagService) List(ctx context.Context, dto dtos.ListTagDTO) (dtos.ListTagResponseDTO, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 dtos.ListTagResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dtos.ListTagDTO) (dtos.ListTagResponseDTO, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dtos.ListTagDTO) dtos.ListTagResponseDTO); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(dtos.ListTagResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dtos.ListTagDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTagService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - dto dtos.ListTagDTO
func (_e *MockTagService_Expecter) List(ctx interface{}, dto interface{}) *MockTagService_List_Call {
	return &MockTagService_List_Call{Call: _e.mock.On("List", ctx, dto)}
}

func (_c *MockTagService_List_Call) Run(run func(ctx context.Context, dto dtos.ListTagDTO)) *MockTagService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dtos.ListTagDTO))
	})
	return _c
}

func (_c *MockTagService_List_Call) Return(_a0 dtos.ListTagResponseDTO, _a1 error) *MockTagService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagService_List_Call) RunAndReturn(run func(context.Context, dtos.ListTagDTO) (dtos.ListTagResponseDTO, error)) *MockTagService_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTagService creates a new instance of MockTagService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagService {
	mock := &MockTagService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
