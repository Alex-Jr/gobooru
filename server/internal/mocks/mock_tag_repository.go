// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "gobooru/internal/models"

	mock "github.com/stretchr/testify/mock"

	repositories "gobooru/internal/repositories"
)

// MockTagRepository is an autogenerated mock type for the TagRepository type
type MockTagRepository struct {
	mock.Mock
}

type MockTagRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagRepository) EXPECT() *MockTagRepository_Expecter {
	return &MockTagRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, tagID
func (_m *MockTagRepository) Delete(ctx context.Context, tagID string) (models.Tag, error) {
	ret := _m.Called(ctx, tagID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Tag, error)); ok {
		return rf(ctx, tagID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Tag); ok {
		r0 = rf(ctx, tagID)
	} else {
		r0 = ret.Get(0).(models.Tag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tagID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTagRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - tagID string
func (_e *MockTagRepository_Expecter) Delete(ctx interface{}, tagID interface{}) *MockTagRepository_Delete_Call {
	return &MockTagRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, tagID)}
}

func (_c *MockTagRepository_Delete_Call) Run(run func(ctx context.Context, tagID string)) *MockTagRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagRepository_Delete_Call) Return(_a0 models.Tag, _a1 error) *MockTagRepository_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagRepository_Delete_Call) RunAndReturn(run func(context.Context, string) (models.Tag, error)) *MockTagRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, tagID
func (_m *MockTagRepository) Get(ctx context.Context, tagID string) (models.Tag, error) {
	ret := _m.Called(ctx, tagID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Tag, error)); ok {
		return rf(ctx, tagID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Tag); ok {
		r0 = rf(ctx, tagID)
	} else {
		r0 = ret.Get(0).(models.Tag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tagID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTagRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - tagID string
func (_e *MockTagRepository_Expecter) Get(ctx interface{}, tagID interface{}) *MockTagRepository_Get_Call {
	return &MockTagRepository_Get_Call{Call: _e.mock.On("Get", ctx, tagID)}
}

func (_c *MockTagRepository_Get_Call) Run(run func(ctx context.Context, tagID string)) *MockTagRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagRepository_Get_Call) Return(_a0 models.Tag, _a1 error) *MockTagRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagRepository_Get_Call) RunAndReturn(run func(context.Context, string) (models.Tag, error)) *MockTagRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, args
func (_m *MockTagRepository) List(ctx context.Context, args repositories.ListTagArgs) ([]models.Tag, int, error) {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Tag
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.ListTagArgs) ([]models.Tag, int, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.ListTagArgs) []models.Tag); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.ListTagArgs) int); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, repositories.ListTagArgs) error); ok {
		r2 = rf(ctx, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTagRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTagRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - args repositories.ListTagArgs
func (_e *MockTagRepository_Expecter) List(ctx interface{}, args interface{}) *MockTagRepository_List_Call {
	return &MockTagRepository_List_Call{Call: _e.mock.On("List", ctx, args)}
}

func (_c *MockTagRepository_List_Call) Run(run func(ctx context.Context, args repositories.ListTagArgs)) *MockTagRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.ListTagArgs))
	})
	return _c
}

func (_c *MockTagRepository_List_Call) Return(_a0 []models.Tag, _a1 int, _a2 error) *MockTagRepository_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTagRepository_List_Call) RunAndReturn(run func(context.Context, repositories.ListTagArgs) ([]models.Tag, int, error)) *MockTagRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTagRepository creates a new instance of MockTagRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagRepository {
	mock := &MockTagRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
