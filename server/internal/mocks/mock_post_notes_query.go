// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	database "gobooru/internal/database"

	mock "github.com/stretchr/testify/mock"

	models "gobooru/internal/models"
)

// MockPostNotesQuery is an autogenerated mock type for the PostNotesQuery type
type MockPostNotesQuery struct {
	mock.Mock
}

type MockPostNotesQuery_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostNotesQuery) EXPECT() *MockPostNotesQuery_Expecter {
	return &MockPostNotesQuery_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, db, postNote
func (_m *MockPostNotesQuery) Create(ctx context.Context, db database.DBClient, postNote *models.PostNote) error {
	ret := _m.Called(ctx, db, postNote)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DBClient, *models.PostNote) error); ok {
		r0 = rf(ctx, db, postNote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPostNotesQuery_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPostNotesQuery_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.DBClient
//   - postNote *models.PostNote
func (_e *MockPostNotesQuery_Expecter) Create(ctx interface{}, db interface{}, postNote interface{}) *MockPostNotesQuery_Create_Call {
	return &MockPostNotesQuery_Create_Call{Call: _e.mock.On("Create", ctx, db, postNote)}
}

func (_c *MockPostNotesQuery_Create_Call) Run(run func(ctx context.Context, db database.DBClient, postNote *models.PostNote)) *MockPostNotesQuery_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DBClient), args[2].(*models.PostNote))
	})
	return _c
}

func (_c *MockPostNotesQuery_Create_Call) Return(_a0 error) *MockPostNotesQuery_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPostNotesQuery_Create_Call) RunAndReturn(run func(context.Context, database.DBClient, *models.PostNote) error) *MockPostNotesQuery_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostNotesQuery creates a new instance of MockPostNotesQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostNotesQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostNotesQuery {
	mock := &MockPostNotesQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
